#!/usr/bin/env python3
"""
Trading Strategy Interface

Defines the interface that all trading strategies must implement.
"""

from abc import ABC, abstractmethod
from typing import Dict, List, Optional, Tuple, Union
import logging

logger = logging.getLogger(__name__)


class TradeSignal:
    """Represents a trading signal generated by a strategy."""
    
    BUY = "BUY"
    SELL = "SELL"
    HOLD = "HOLD"
    
    def __init__(self, signal_type: str, price: float, timestamp: int, confidence: float = 1.0):
        """
        Initialize a trade signal.
        
        Args:
            signal_type: Type of signal (BUY, SELL, HOLD)
            price: Current price when signal was generated
            timestamp: Unix timestamp when signal was generated
            confidence: Signal confidence level (0.0 to 1.0)
        """
        self.type = signal_type
        self.price = price
        self.timestamp = timestamp
        self.confidence = confidence
    
    def __str__(self) -> str:
        return f"{self.type} signal at {self.price} (confidence: {self.confidence:.2f})"


class TradeStrategyInterface(ABC):
    """Interface for all trading strategies."""
    
    def __init__(self, name: str = "BaseStrategy"):
        """
        Initialize the strategy.
        
        Args:
            name: Strategy name
        """
        self.name = name
        self.parameters = {}
        self.last_signal = None
        logger.info(f"Initialized strategy: {name}")
    
    @abstractmethod
    def execute(self, current_price: float, in_position: bool) -> Optional[TradeSignal]:
        """
        Execute the strategy and generate a trading signal.
        
        Args:
            current_price: Current price of the asset
            in_position: Whether we currently hold a position
            
        Returns:
            A TradeSignal object or None if no action should be taken
        """
        pass
    
    @abstractmethod
    def feed_ohlc(self, ohlc_data: List[Dict[str, Union[float, int]]]):
        """
        Feed OHLC (Open-High-Low-Close) data to the strategy.
        
        Args:
            ohlc_data: List of OHLC candles with keys 'open', 'high', 'low', 'close', 'volume', 'timestamp'
        """
        pass
    
    @abstractmethod
    def feed_depth(self, depth_data: Dict[str, List[List[float]]]):
        """
        Feed market depth data to the strategy.
        
        Args:
            depth_data: Market depth data with 'bids' and 'asks' lists
        """
        pass
    
    @abstractmethod
    def feed_price_quantity_volume(self, price: float, quantity: float, volume: float):
        """
        Feed real-time price, quantity, and volume data to the strategy.
        
        Args:
            price: Current price
            quantity: Last trade quantity
            volume: Current volume
        """
        pass
    
    def set_parameters(self, parameters: Dict[str, any]):
        """
        Set strategy parameters.
        
        Args:
            parameters: Dictionary of parameter name-value pairs
        """
        self.parameters.update(parameters)
        logger.info(f"Updated parameters for {self.name}: {parameters}")
    
    def get_parameters(self) -> Dict[str, any]:
        """
        Get current strategy parameters.
        
        Returns:
            Dictionary of parameter name-value pairs
        """
        return self.parameters
    
    def reset(self):
        """
        Reset the strategy state.
        """
        self.last_signal = None
        logger.info(f"Reset strategy: {self.name}")
